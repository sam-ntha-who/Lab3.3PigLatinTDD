public class PigLatin {

	public static void main(String[] args) {

		String toPigLatin = PigLatinPrompt.userInput();
		sortAndPrint(toPigLatin);

	}

	public static void sortAndPrint(String toPigLatin) {
		System.out.println("Your word is: " + toPigLatin);
		// return an email address as same - doesn't go through translate() as it is not
		// being translated.
		// edit to include other special chars
		if (toPigLatin.matches(".*@$.*")) {
			System.out.println(returnSame(toPigLatin));
			
			// tests for spaces between words
		} else if (toPigLatin.matches(".*\\s.*")) {
			
			// runs through phrase method then translator method
			toPigLatin = phrase(toPigLatin);
			System.out.println("In Pig Latin, that translates to: " + toPigLatin);
			
			// regular degular translator
		} else
			System.out.println("In Pig Latin, that translates to: " + translate(toPigLatin));
	}

	public static Boolean isVowel(char c) {
		char[] vowels = { 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U' };
		String word = String.valueOf(c);
		String vowelsOnly = new String(vowels);
		return vowelsOnly.contains(word);
	}

	public static String translate(String toPigLatin) {
		// pig latin rules, take leading consonants from the beginning of a word
		// move them to the end of the word, then add suffix -ay. Y is a consonant here
		// if the word starts with a vowel, just end word with suffix -way

		char[] word = toPigLatin.toCharArray();
		String firstSub;
		String lastSub;
		if (isVowel(word[0]) == true) {
			toPigLatin += "way";
		} else {
			
			// move thru consonants
			int index = 0;
			for (int i = 0; i <= toPigLatin.length(); i++) {

				if (isVowel(toPigLatin.toCharArray()[i]) == true) {
					index = i;
					break;
				}
			}
			firstSub = toPigLatin.substring(index);
			lastSub = toPigLatin.substring(0, index);
			toPigLatin = firstSub + lastSub + "ay";

		}

		return toPigLatin;
	}

	public static String phrase(String toPigLatin) {

		String[] multiWord = toPigLatin.split(" ");
		String output = "";

		for (int i = 0; i < multiWord.length; i++) {
			output += translate(multiWord[i]) + " ";

		}
		output = output.trim();
		return output;

	}

	public static String returnSame(String same) {
		return same;
	}
}

